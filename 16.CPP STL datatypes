A good use of auto is to avoid long initializations when creating iterators for containers.
#include <bits/stdc++.h> 
using namespace std; 
  
int main() 
{ 
    // Create a set of strings 
    set<string> st; 
    st.insert({ "geeks", "for", "geeks", "org" }); 
  
    // 'it' evaluates to iterator to set of string 
    // type automatically 
    for (auto it = st.begin(); it != st.end(); it++) 
        cout << *it << " "; 
  
    return 0; 
} 
----------------------------------
auto keyword


The auto keyword specifies that the type of the variable that is being declared will be automatically deducted from its initializer.
In case of functions, if their return type is auto then that will be evaluated by return type expression at runtime.
#include <bits/stdc++.h> 
using namespace std; 
  
int main() 
{ 
    auto x = 4; 
    auto y = 3.37; 
    auto ptr = &x; 
    cout << typeid(x).name() << endl 
         << typeid(y).name() << endl 
         << typeid(ptr).name() << endl; 
  
    return 0; 
} 
------------------------------------
decltype Keyword

It inspects the declared type of an entity or the type of an expression. 
Auto lets you declare a variable with particular type whereas decltype lets you extract the type from 
the variable so decltype is sort of an operator that evaluates the type of passed expression.
Explanation of above keyword and their uses is given below


#include <bits/stdc++.h> 
using namespace std; 
  
int fun1() { return 10; } 
char fun2() { return 'g'; } 
  
int main() 
{ 
    // Data type of x is same as return type of fun1() 
    // and type of y is same as return type of fun2() 
    decltype(fun1()) x; 
    decltype(fun2()) y; 
  
    cout << typeid(x).name() << endl; 
    cout << typeid(y).name() << endl; 
  
    return 0; 
} 
